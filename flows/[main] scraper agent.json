{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-U25SE",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-zJher",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-U25SE{œdataTypeœ:œChatInputœ,œidœ:œChatInput-U25SEœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-zJher{œfieldNameœ:œinput_valueœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-U25SE",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-U25SEœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-zJher",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-zJher",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-gOEgj",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-zJher{œdataTypeœ:œAgentœ,œidœ:œAgent-zJherœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-gOEgj{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-gOEgjœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-zJher",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-zJherœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-gOEgj",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-gOEgjœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "MCPTools",
            "id": "MCPTools-Uvxt8",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-zJher",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-MCPTools-Uvxt8{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-Uvxt8œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-zJher{œfieldNameœ:œtoolsœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "MCPTools-Uvxt8",
        "sourceHandle": "{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-Uvxt8œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-zJher",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ReadFileComponent",
            "id": "ReadFileComponent-doaYk",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-zJher",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ReadFileComponent-doaYk{œdataTypeœ:œReadFileComponentœ,œidœ:œReadFileComponent-doaYkœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-zJher{œfieldNameœ:œtoolsœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ReadFileComponent-doaYk",
        "sourceHandle": "{œdataTypeœ:œReadFileComponentœ,œidœ:œReadFileComponent-doaYkœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-zJher",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-zJherœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-U25SE",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "key": "ChatInput",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0020353564437605998,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "get all job listings from this url from page 1-3: https://medrecruit.medworld.com/jobs/list?location=New+South+Wales&amp;page=1"
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "selected_output": "message",
          "showNode": true,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-U25SE",
        "measured": {
          "height": 204,
          "width": 320
        },
        "position": {
          "x": 1235.4222740043401,
          "y": 897.5992294662233
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-gOEgj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "outputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "key": "ChatOutput",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003169567463043492,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-gOEgj",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 2218.548258647772,
          "y": 742.1718149182726
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-zJher",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "last_updated": "2025-09-07T15:17:00.328Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "hidden": null,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Language Model",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 35
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "input_types": [],
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o1-mini",
                  "o1-pro",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "## Role\nYou are a **helpful assistant** that helps the user scrape content from websites and format the scraped content as requested.\n\n## Task\n- Assist the user with their scraping needs.\n- The user may ask follow-up questions about the scraping results or request specific formatting.\n- Always return your output in **JSON format** with two fields:\n  * `\"text\"` → your response to the user (e.g., follow-up questions, clarifications, or explanations).\n  * `\"content\"` → the scraped content in JSON format.\n\n## Available Tool\nuse available tools to help you scrap the content from the internet\n- Please start by using `spawn_browser` tool to get instance_id. when using `spawn_browser` you need to pass below args, make sure you fill all required arguments\nArgs:\n    headless (bool): Run in headless mode.\n    user_agent (Optional[str]): Custom user agent string.\n    viewport_width (int): Viewport width in pixels.\n    viewport_height (int): Viewport height in pixels.\n    proxy (Optional[str]): Proxy server URL.\n    block_resources (List[str]): List of resource types to block (e.g., ['image', 'font', 'stylesheet']).\n    extra_headers (Dict[str, str]): Additional HTTP headers.\n    user_data_dir (Optional[str]): Path to user data directory for persistent sessions.\n    sandbox (Optional[Any]): Enable browser sandbox. Accepts bool, string ('true'/'false'), int (1/0), or None for auto-detect.\n\n{\n  \"headless\": true,\n  \"viewport_width\": 1920,\n  \"viewport_height\": 1080,\n  \"block_resources\": [\n    \"image\",\n    \"font\",\n    \"stylesheet\"\n  ],\n  \"extra_headers\": {}\n}\n\nFollow this tool step to scrap content from a website\n2. mcp__stealth-browser-mcp__spawn_browser\n\n  {\n    \"headless\": true,\n    \"viewport_width\": 1920,\n    \"viewport_height\": 1080\n  }\n\n  3. mcp__stealth-browser-mcp__get_page_content\nAlways execute get_page_content \n  {\n    \"instance_id\": <instance-id>,\n    \"include_frames\": false\n  }\n\n  4. Read File\n\n  {\n    \"file_path\": <path_to_page_content>,\n  }\n\n  5. mcp__stealth-browser-mcp__query_elements\nQuery elements that is relevant based on page content from step 4\n\n  6. mcp__stealth-browser-mcp__execute_script\nGeneral Guidelines for JavaScript Web Scraping Functions\n\nStep 1: Page Analysis and Reconnaissance\n\nA. Initial Page Exploration\n\n// 1. Use browser tools to inspect page structure\nmcp__stealth-browser-mcp__get_page_content()\nmcp__stealth-browser-mcp__query_elements() // Try common \nselectors\n\nB. Identify Data Containers\n\n// Common container selectors to try:\nconst containerSelectors = [\n'[data-testid*=\"list\"]', '[data-testid*=\"item\"]',\n'.list', '.items', '.results', '.container',\n'[class*=\"list\"]', '[class*=\"item\"]', '[class*=\"card\"]',\n'main', 'section', 'article',\n'[role=\"main\"]', '[role=\"list\"]'\n];\n\nStep 2: Build the Base Function Structure\n\nA. IIFE Wrapper Pattern\n\n(function() {\ntry {\n    // Your scraping logic here\n    return {\n    success: true,\n    data: results,\n    metadata: { /* page info */ }\n    };\n} catch (error) {\n    return {\n    success: false,\n    error: error.message,\n    data: []\n    };\n}\n})();\n\nB. Container Detection Function\n\nfunction findContainer(selectors) {\nfor (const selector of selectors) {\n    const container = document.querySelector(selector);\n    if (container && container.children.length > 0) {\n    return container;\n    }\n}\nreturn null;\n}\n\nStep 3: Data Extraction Strategies\n\nA. Multi-Selector Approach\n\nfunction extractText(element, selectors) {\nfor (const selector of selectors) {\n    const el = element.querySelector(selector);\n    if (el && el.textContent.trim()) {\n    return el.textContent.trim();\n    }\n}\nreturn 'N/A';\n}\n\n// Usage example:\nconst titleSelectors = ['h1', 'h2', 'h3', '[class*=\"title\"]',\n'[class*=\"name\"]', 'a[href]'];\nconst title = extractText(itemElement, titleSelectors);\n\nB. Regex Pattern Library\n\nconst patterns = {\nprice: /\\$[\\d,]+(?:\\.\\d{2})?/,\nemail: /[\\w\\.-]+@[\\w\\.-]+\\.\\w+/,\nphone: /(?:\\+?1[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-\n.\\s]?([0-9]{4})/,\ndate: /\\d{1,2}[-\\/]\\d{1,2}[-\\/]\\d{2,4}/,\nurl: /https?:\\/\\/[^\\s]+/,\ncurrency: /[$€£¥]\\s*[\\d,]+(?:\\.\\d{2})?/\n};\n\nfunction extractPattern(text, patternName) {\nconst match = text.match(patterns[patternName]);\nreturn match ? match[0] : null;\n}\n\nStep 4: Robust Item Processing\n\nA. Safe Data Extraction\n\nfunction extractItemData(element, index) {\nconst text = element.textContent || '';\nconst html = element.innerHTML || '';\n\nreturn {\n    index: index + 1,\n    title: extractText(element, titleSelectors),\n    description: extractText(element, descriptionSelectors),\n    price: extractPattern(text, 'price'),\n    link: element.querySelector('a')?.href || '',\n    image: element.querySelector('img')?.src || '',\n    metadata: {\n    textLength: text.length,\n    hasImage: !!element.querySelector('img'),\n    hasLink: !!element.querySelector('a')\n    }\n};\n}\n\nB. Attribute Extraction Helper\n\nfunction extractAttributes(element, attributes = ['href', \n'src', 'alt', 'title', 'data-*']) {\nconst attrs = {};\nattributes.forEach(attr => {\n    if (attr === 'data-*') {\n    // Extract all data attributes\n    [...element.attributes].forEach(a => {\n        if (a.name.startsWith('data-')) {\n        attrs[a.name] = a.value;\n        }\n    });\n    } else {\n    const value = element.getAttribute(attr);\n    if (value) attrs[attr] = value;\n    }\n});\nreturn attrs;\n}\n\nStep 5: Complete Template Function\n\n(function() {\n// Configuration\nconst config = {\n    maxItems: 50,\n    containerSelectors: [\n    '[data-testid*=\"list\"]', '.results', '.items',\n    '[class*=\"list\"]', '[class*=\"grid\"]', 'main'\n    ],\n    itemSelectors: [\n    '[class*=\"item\"]', '[class*=\"card\"]',\n    'article', 'li', '.result'\n    ],\n    titleSelectors: ['h1', 'h2', 'h3', '[class*=\"title\"]',\n'a'],\n    descriptionSelectors: ['p', '[class*=\"desc\"]',\n'.summary'],\n    priceSelectors: ['[class*=\"price\"]', '[class*=\"cost\"]',\n'.amount']\n};\n\ntry {\n    // Find container\n    let container = null;\n    for (const selector of config.containerSelectors) {\n    container = document.querySelector(selector);\n    if (container && container.children.length > 0) break;\n    }\n\n    if (!container) {\n    return {success: false, error: \"No container found\",\ndata: []};\n    }\n\n    // Find items\n    let items = [];\n    for (const selector of config.itemSelectors) {\n    items =\nArray.from(container.querySelectorAll(selector));\n    if (items.length > 0) break;\n    }\n\n    if (items.length === 0) {\n    items = Array.from(container.children);\n    }\n\n    // Extract data\n    const results = items.slice(0,\nconfig.maxItems).map((item, index) => {\n    const text = item.textContent || '';\n\n    return {\n        index: index + 1,\n        title: extractText(item, config.titleSelectors),\n        description: extractText(item,\nconfig.descriptionSelectors),\n        price: extractPattern(text, 'price'),\n        link: item.querySelector('a')?.href || '',\n        image: item.querySelector('img')?.src || '',\n        rawText: text.substring(0, 300) + (text.length > 300\n? '...' : ''),\n        attributes: extractAttributes(item)\n    };\n    });\n\n    return {\n    success: true,\n    data: results,\n    metadata: {\n        totalItems: results.length,\n        containerSelector: container.tagName +\n(container.className ? '.' + container.className.split(' \n')[0] : ''),\n        url: window.location.href,\n        timestamp: new Date().toISOString()\n    }\n    };\n\n} catch (error) {\n    return {\n    success: false,\n    error: error.message,\n    data: []\n    };\n}\n\n// Helper functions (include the ones from above)\nfunction extractText(element, selectors) { /* ... */ }\nfunction extractPattern(text, patternName) { /* ... */ }\nfunction extractAttributes(element, attributes) { /* ... */\n}\n})();\n\nStep 6: Best Practices\n\nA. Error Handling\n\n- Always use try-catch blocks\n- Provide fallback values ('N/A' instead of null)\n- Return consistent data structure\n- Include error details for debugging\n\nB. Performance Optimization\n\n- Limit results (slice array)\n- Use efficient selectors\n- Cache frequently used elements\n- Avoid nested loops when possible\n\nC. Flexibility\n\n- Try multiple selectors for each data type\n- Handle different page structures\n- Include metadata for debugging\n- Make configurations easily adjustable\n\nD. Data Quality\n\n- Trim whitespace\n- Validate extracted data\n- Include original text for verification\n- Handle empty/missing elements gracefully\n\nThis template approach works for most websites and can be\neasily customized for specific scraping needs.\n\n  8. mcp__stealth-browser-mcp__close_instance\n\n  {\n    \"instance_id\":<instance-id>\n  }\n\n\n## Instructions\n1. When the user provides a URL, try call appropriate tools to fetch the content.\n2. Keep the tool output be short not exceeding 8000 tokens.\n3. Return results in the required JSON structure:\n\n```json\n{\n  \"text\": \"Your response to the user here.\",\n  \"content\": { \"scraped_content_here\": \"...\" }\n}\n```\n\n3. If the user asks for reformatting, process the scraped content accordingly and return the reformatted version under `\"content\"`.\n4. Keep `\"text\"` conversational and helpful, guiding the user to the next step (e.g., ask clarifying questions, confirm formatting).\n5. Never output raw content outside the JSON structure.\n\n---\n\n## Example Interaction\n\n### Example 1: Scraping a URL\n\n**User:**\n\n```\nPlease scrape https://example.com/articles/123\n```\n\n**Assistant:**\n\n```json\n{\n  \"text\": \"I’ve scraped the content from the given URL. Do you want me to summarize it or keep the full raw content?\",\n  \"content\": {\n    \"title\": \"Example Article\",\n    \"author\": \"John Doe\",\n    \"published_date\": \"2025-08-20\",\n    \"body\": \"This is the main text content of the article...\"\n  }\n}\n```\n\n---\n\n### Example 2: Formatting Request\n\n**User:**\n\n```\nCan you return only the title and published_date from the previous scrape?\n```\n\n**Assistant:**\n\n```json\n{\n  \"text\": \"Here are the fields you requested: only the title and published date.\",\n  \"content\": {\n    \"title\": \"Example Article\",\n    \"published_date\": \"2025-08-20\"\n  }\n}\n```\n\n---\n\n### Example 3: Handling an Invalid URL\n\n**User:**\n\n```\nScrape https://invalid-url-12345.com\n```\n\n**Assistant:**\n\n```json\n{\n  \"text\": \"I wasn’t able to scrape the content from that URL. Could you check if the link is correct or provide another one?\",\n  \"content\": {}\n}\n```\n\n---\n\n### Example 4: Scrape Succeeds but No Content Found\n\n**User:**\n\n```\nScrape https://example.com/empty-page\n```\n\n**Assistant:**\n\n```json\n{\n  \"text\": \"I successfully accessed the page, but there wasn’t any extractable content. Would you like me to try a different page or look for metadata instead?\",\n  \"content\": {}\n}\n```"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 9007199254740991
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "selected_output": "response",
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-zJher",
        "measured": {
          "height": 842,
          "width": 320
        },
        "position": {
          "x": 1641.6239626366948,
          "y": 301.10345101561927
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MCPTools-Uvxt8",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-09-07T15:16:51.433Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool  # noqa: TC002\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.agents.utils import maybe_unflatten_dict, safe_cache_get, safe_cache_set\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes  # noqa: TC001\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        self._ensure_cache_structure()\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    def _ensure_cache_structure(self):\n        \"\"\"Ensure the cache has the required structure.\"\"\"\n        # Check if servers key exists and is not CacheMiss\n        servers_value = safe_cache_get(self._shared_component_cache, \"servers\")\n        if servers_value is None:\n            safe_cache_set(self._shared_component_cache, \"servers\", {})\n\n        # Check if last_selected_server key exists and is not CacheMiss\n        last_server_value = safe_cache_get(self._shared_component_cache, \"last_selected_server\")\n        if last_server_value is None:\n            safe_cache_set(self._shared_component_cache, \"last_selected_server\", \"\")\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n        cached = servers_cache.get(server_name) if isinstance(servers_cache, dict) else None\n\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n                cache_data = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n\n                # Safely update the servers cache\n                current_servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                if isinstance(current_servers_cache, dict):\n                    current_servers_cache[server_name] = cache_data\n                    safe_cache_set(self._shared_component_cache, \"servers\", current_servers_cache)\n\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = safe_cache_get(self._shared_component_cache, \"last_selected_server\", \"\")\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                safe_cache_set(self._shared_component_cache, \"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                    if isinstance(servers_cache, dict):\n                        cached = servers_cache.get(current_server_name)\n                        if cached is not None:\n                            cached_tools = cached[\"tools\"]\n                            self.tools = cached_tools\n                            self.tool_names = cached[\"tool_names\"]\n                            self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {
                  "config": {
                    "args": [
                      "/app/stealth-browser-mcp/src/server.py",
                      "--minimal"
                    ],
                    "command": "/app/stealth-browser-mcp/mcp-venv/bin/python"
                  },
                  "name": "stealth_browser_minimal"
                }
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [
                  "spawn_browser",
                  "list_instances",
                  "close_instance",
                  "get_instance_state",
                  "navigate",
                  "go_back",
                  "go_forward",
                  "reload_page",
                  "query_elements",
                  "click_element",
                  "type_text",
                  "paste_text",
                  "select_option",
                  "get_element_state",
                  "wait_for_element",
                  "scroll_page",
                  "execute_script",
                  "get_page_content",
                  "take_screenshot",
                  "list_network_requests",
                  "get_request_details",
                  "get_response_details",
                  "get_response_content",
                  "modify_headers",
                  "get_cookies",
                  "set_cookie",
                  "clear_cookies",
                  "get_debug_view",
                  "clear_debug_view",
                  "export_debug_logs",
                  "get_debug_lock_status",
                  "list_tabs",
                  "switch_tab",
                  "close_tab",
                  "get_active_tab",
                  "new_tab",
                  "extract_element_styles",
                  "extract_element_structure",
                  "extract_element_events",
                  "extract_element_animations",
                  "extract_element_assets",
                  "extract_element_styles_cdp",
                  "extract_related_files",
                  "clone_element_complete",
                  "hot_reload",
                  "reload_status",
                  "validate_browser_environment_tool",
                  "clone_element_progressive",
                  "expand_styles",
                  "expand_events",
                  "expand_children",
                  "expand_css_rules",
                  "expand_pseudo_elements",
                  "expand_animations",
                  "list_stored_elements",
                  "clear_stored_element",
                  "clear_all_elements",
                  "clone_element_to_file",
                  "extract_complete_element_to_file",
                  "extract_complete_element_cdp",
                  "extract_element_styles_to_file",
                  "extract_element_structure_to_file",
                  "extract_element_events_to_file",
                  "extract_element_animations_to_file",
                  "extract_element_assets_to_file",
                  "list_clone_files",
                  "cleanup_clone_files",
                  "list_cdp_commands",
                  "execute_cdp_command",
                  "get_execution_contexts",
                  "discover_global_functions",
                  "discover_object_methods",
                  "call_javascript_function",
                  "inspect_function_signature",
                  "inject_and_execute_script",
                  "create_persistent_function",
                  "execute_function_sequence",
                  "create_python_binding",
                  "execute_python_in_browser",
                  "get_function_executor_info",
                  "create_dynamic_hook",
                  "create_simple_dynamic_hook",
                  "list_dynamic_hooks",
                  "get_dynamic_hook_details",
                  "remove_dynamic_hook",
                  "get_hook_documentation",
                  "get_hook_examples",
                  "get_hook_requirements_documentation",
                  "get_hook_common_patterns",
                  "validate_hook_function"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "block_resources": {
                        "anyOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Block Resources"
                      },
                      "extra_headers": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/AnonModel0"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null
                      },
                      "headless": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Headless"
                      },
                      "proxy": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Proxy"
                      },
                      "sandbox": {
                        "anyOf": [
                          {},
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Sandbox"
                      },
                      "user_agent": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "User Agent"
                      },
                      "user_data_dir": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "User Data Dir"
                      },
                      "viewport_height": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 1080,
                        "title": "Viewport Height"
                      },
                      "viewport_width": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 1920,
                        "title": "Viewport Width"
                      }
                    },
                    "description": "Spawn a new browser instance.\n\nArgs:\n    headless (bool): Run in headless mode.\n    user_agent (Optional[str]): Custom user agent string.\n    viewport_width (int): Viewport width in pixels.\n    viewport_height (int): Viewport height in pixels.\n    proxy (Optional[str]): Proxy server URL.\n    block_resources (List[str]): List of resource types to block (e.g., ['image', 'font', 'stylesheet']).\n    extra_headers (Dict[str, str]): Additional HTTP headers.\n    user_data_dir (Optional[str]): Path to user data directory for persistent sessions.\n    sandbox (Optional[Any]): Enable browser sandbox. Accepts bool, string ('true'/'false'), int (1/0), or None for auto-detect.\n\nReturns:\n    Dict[str, Any]: Instance information including instance_id.",
                    "display_description": "Spawn a new browser instance.\n\nArgs:\n    headless (bool): Run in headless mode.\n    user_agent (Optional[str]): Custom user agent string.\n    viewport_width (int): Viewport width in pixels.\n    viewport_height (int): Viewport height in pixels.\n    proxy (Optional[str]): Proxy server URL.\n    block_resources (List[str]): List of resource types to block (e.g., ['image', 'font', 'stylesheet']).\n    extra_headers (Dict[str, str]): Additional HTTP headers.\n    user_data_dir (Optional[str]): Path to user data directory for persistent sessions.\n    sandbox (Optional[Any]): Enable browser sandbox. Accepts bool, string ('true'/'false'), int (1/0), or None for auto-detect.\n\nReturns:\n    Dict[str, Any]: Instance information including instance_id.",
                    "display_name": "spawn_browser",
                    "name": "spawn_browser",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "spawn_browser"
                    ]
                  },
                  {
                    "args": {},
                    "description": "List all active browser instances.\n\nReturns:\n    List[Dict[str, Any]]: List of browser instances with their current state.",
                    "display_description": "List all active browser instances.\n\nReturns:\n    List[Dict[str, Any]]: List of browser instances with their current state.",
                    "display_name": "list_instances",
                    "name": "list_instances",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_instances"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Close a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if closed successfully.",
                    "display_description": "Close a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if closed successfully.",
                    "display_name": "close_instance",
                    "name": "close_instance",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "close_instance"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Get detailed state of a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Complete state information.",
                    "display_description": "Get detailed state of a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Complete state information.",
                    "display_name": "get_instance_state",
                    "name": "get_instance_state",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_instance_state"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "referrer": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Referrer"
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 30000,
                        "title": "Timeout"
                      },
                      "url": {
                        "title": "Url",
                        "type": "string"
                      },
                      "wait_until": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "load",
                        "title": "Wait Until"
                      }
                    },
                    "description": "Navigate to a URL.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to navigate to.\n    wait_until (str): Wait condition - 'load', 'domcontentloaded', or 'networkidle'.\n    timeout (int): Navigation timeout in milliseconds.\n    referrer (Optional[str]): Referrer URL.\n\nReturns:\n    Dict[str, Any]: Navigation result with final URL and title.",
                    "display_description": "Navigate to a URL.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to navigate to.\n    wait_until (str): Wait condition - 'load', 'domcontentloaded', or 'networkidle'.\n    timeout (int): Navigation timeout in milliseconds.\n    referrer (Optional[str]): Referrer URL.\n\nReturns:\n    Dict[str, Any]: Navigation result with final URL and title.",
                    "display_name": "navigate",
                    "name": "navigate",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "navigate"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Navigate back in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
                    "display_description": "Navigate back in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
                    "display_name": "go_back",
                    "name": "go_back",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "go_back"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Navigate forward in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
                    "display_description": "Navigate forward in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
                    "display_name": "go_forward",
                    "name": "go_forward",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "go_forward"
                    ]
                  },
                  {
                    "args": {
                      "ignore_cache": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Ignore Cache"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Reload the current page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    ignore_cache (bool): Whether to ignore cache when reloading.\n\nReturns:\n    bool: True if reload was successful.",
                    "display_description": "Reload the current page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    ignore_cache (bool): Whether to ignore cache when reloading.\n\nReturns:\n    bool: True if reload was successful.",
                    "display_name": "reload_page",
                    "name": "reload_page",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "reload_page"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "limit": {
                        "anyOf": [
                          {},
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Limit"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "text_filter": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Text Filter"
                      },
                      "visible_only": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Visible Only"
                      }
                    },
                    "description": "Query DOM elements.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath (starts with '//').\n    text_filter (Optional[str]): Filter by text content.\n    visible_only (bool): Only return visible elements.\n    limit (Optional[Any]): Maximum number of elements to return.\n\nReturns:\n    List[Dict[str, Any]]: List of matching elements with their properties.",
                    "display_description": "Query DOM elements.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath (starts with '//').\n    text_filter (Optional[str]): Filter by text content.\n    visible_only (bool): Only return visible elements.\n    limit (Optional[Any]): Maximum number of elements to return.\n\nReturns:\n    List[Dict[str, Any]]: List of matching elements with their properties.",
                    "display_name": "query_elements",
                    "name": "query_elements",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "query_elements"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "text_match": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Text Match"
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 10000,
                        "title": "Timeout"
                      }
                    },
                    "description": "Click an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text_match (Optional[str]): Click element with matching text.\n    timeout (int): Timeout in milliseconds.\n\nReturns:\n    bool: True if clicked successfully.",
                    "display_description": "Click an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text_match (Optional[str]): Click element with matching text.\n    timeout (int): Timeout in milliseconds.\n\nReturns:\n    bool: True if clicked successfully.",
                    "display_name": "click_element",
                    "name": "click_element",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "click_element"
                    ]
                  },
                  {
                    "args": {
                      "clear_first": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Clear First"
                      },
                      "delay_ms": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 50,
                        "title": "Delay Ms"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "parse_newlines": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Parse Newlines"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "shift_enter": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Shift Enter"
                      },
                      "text": {
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "   Type text into an input field.\n\n   Args:\n       instance_id (str): Browser instance ID.\n       selector (str): CSS selector or XPath.\n       text (str): Text to type.\n       clear_first (bool): Clear field before typing.\n       delay_ms (int): Delay between keystrokes in milliseconds.\n       parse_newlines (bool): If True, parse \nas Enter key presses.\n       shift_enter (bool): If True, use Shift+Enter instead of Enter (for chat apps).\n\n   Returns:\n       bool: True if typed successfully.\n   ",
                    "display_description": "   Type text into an input field.\n\n   Args:\n       instance_id (str): Browser instance ID.\n       selector (str): CSS selector or XPath.\n       text (str): Text to type.\n       clear_first (bool): Clear field before typing.\n       delay_ms (int): Delay between keystrokes in milliseconds.\n       parse_newlines (bool): If True, parse \nas Enter key presses.\n       shift_enter (bool): If True, use Shift+Enter instead of Enter (for chat apps).\n\n   Returns:\n       bool: True if typed successfully.\n   ",
                    "display_name": "type_text",
                    "name": "type_text",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "type_text"
                    ]
                  },
                  {
                    "args": {
                      "clear_first": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Clear First"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "text": {
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "Paste text instantly into an input field.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text (str): Text to paste.\n    clear_first (bool): Clear field before pasting.\n\nReturns:\n    bool: True if pasted successfully.",
                    "display_description": "Paste text instantly into an input field.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text (str): Text to paste.\n    clear_first (bool): Clear field before pasting.\n\nReturns:\n    bool: True if pasted successfully.",
                    "display_name": "paste_text",
                    "name": "paste_text",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "paste_text"
                    ]
                  },
                  {
                    "args": {
                      "index": {
                        "anyOf": [
                          {},
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Index"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "text": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Text"
                      },
                      "value": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Value"
                      }
                    },
                    "description": "Select an option from a dropdown.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the select element.\n    value (Optional[str]): Option value attribute.\n    text (Optional[str]): Option text content.\n    index (Optional[Any]): Option index (0-based). Can be string or int.\n\nReturns:\n    bool: True if selected successfully.",
                    "display_description": "Select an option from a dropdown.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the select element.\n    value (Optional[str]): Option value attribute.\n    text (Optional[str]): Option text content.\n    index (Optional[Any]): Option index (0-based). Can be string or int.\n\nReturns:\n    bool: True if selected successfully.",
                    "display_name": "select_option",
                    "name": "select_option",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "select_option"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Get complete state of an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n\nReturns:\n    Dict[str, Any]: Element state including attributes, style, position, etc.",
                    "display_description": "Get complete state of an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n\nReturns:\n    Dict[str, Any]: Element state including attributes, style, position, etc.",
                    "display_name": "get_element_state",
                    "name": "get_element_state",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_element_state"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      },
                      "text_content": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Text Content"
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 30000,
                        "title": "Timeout"
                      },
                      "visible": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Visible"
                      }
                    },
                    "description": "Wait for an element to appear.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    timeout (int): Timeout in milliseconds.\n    visible (bool): Wait for element to be visible.\n    text_content (Optional[str]): Wait for specific text content.\n\nReturns:\n    bool: True if element found.",
                    "display_description": "Wait for an element to appear.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    timeout (int): Timeout in milliseconds.\n    visible (bool): Wait for element to be visible.\n    text_content (Optional[str]): Wait for specific text content.\n\nReturns:\n    bool: True if element found.",
                    "display_name": "wait_for_element",
                    "name": "wait_for_element",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "wait_for_element"
                    ]
                  },
                  {
                    "args": {
                      "amount": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 500,
                        "title": "Amount"
                      },
                      "direction": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "down",
                        "title": "Direction"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "smooth": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Smooth"
                      }
                    },
                    "description": "Scroll the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    direction (str): 'down', 'up', 'left', 'right', 'top', or 'bottom'.\n    amount (int): Pixels to scroll (ignored for 'top' and 'bottom').\n    smooth (bool): Use smooth scrolling.\n\nReturns:\n    bool: True if scrolled successfully.",
                    "display_description": "Scroll the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    direction (str): 'down', 'up', 'left', 'right', 'top', or 'bottom'.\n    amount (int): Pixels to scroll (ignored for 'top' and 'bottom').\n    smooth (bool): Use smooth scrolling.\n\nReturns:\n    bool: True if scrolled successfully.",
                    "display_name": "scroll_page",
                    "name": "scroll_page",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "scroll_page"
                    ]
                  },
                  {
                    "args": {
                      "args": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Args"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "script": {
                        "title": "Script",
                        "type": "string"
                      }
                    },
                    "description": "Execute JavaScript in page context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script (str): JavaScript code to execute.\n    args (Optional[List[Any]]): Arguments to pass to the script.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
                    "display_description": "Execute JavaScript in page context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script (str): JavaScript code to execute.\n    args (Optional[List[Any]]): Arguments to pass to the script.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
                    "display_name": "execute_script",
                    "name": "execute_script",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_script"
                    ]
                  },
                  {
                    "args": {
                      "include_frames": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Frames"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Get page HTML and text content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    include_frames (bool): Include iframe information.\n\nReturns:\n    Dict[str, Any]: Page content including HTML, text, and metadata.",
                    "display_description": "Get page HTML and text content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    include_frames (bool): Include iframe information.\n\nReturns:\n    Dict[str, Any]: Page content including HTML, text, and metadata.",
                    "display_name": "get_page_content",
                    "name": "get_page_content",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_page_content"
                    ]
                  },
                  {
                    "args": {
                      "file_path": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "File Path"
                      },
                      "format": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "png",
                        "title": "Format"
                      },
                      "full_page": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Full Page"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Take a screenshot of the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    full_page (bool): Capture full page (not just viewport).\n    format (str): Image format ('png' or 'jpeg').\n    file_path (Optional[str]): Optional file path to save screenshot to.\n\nReturns:\n    Union[str, Dict]: File path if file_path provided, otherwise optimized base64 data or file info dict.",
                    "display_description": "Take a screenshot of the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    full_page (bool): Capture full page (not just viewport).\n    format (str): Image format ('png' or 'jpeg').\n    file_path (Optional[str]): Optional file path to save screenshot to.\n\nReturns:\n    Union[str, Dict]: File path if file_path provided, otherwise optimized base64 data or file info dict.",
                    "display_name": "take_screenshot",
                    "name": "take_screenshot",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "take_screenshot"
                    ]
                  },
                  {
                    "args": {
                      "filter_type": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Filter Type"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "List captured network requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    filter_type (Optional[str]): Filter by resource type (e.g., 'image', 'script', 'xhr').\n\nReturns:\n    Union[List[Dict[str, Any]], Dict[str, Any]]: List of network requests, or file metadata if response too large.",
                    "display_description": "List captured network requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    filter_type (Optional[str]): Filter by resource type (e.g., 'image', 'script', 'xhr').\n\nReturns:\n    Union[List[Dict[str, Any]], Dict[str, Any]]: List of network requests, or file metadata if response too large.",
                    "display_name": "list_network_requests",
                    "name": "list_network_requests",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_network_requests"
                    ]
                  },
                  {
                    "args": {
                      "request_id": {
                        "title": "Request Id",
                        "type": "string"
                      }
                    },
                    "description": "Get detailed information about a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Request details including headers, cookies, and body.",
                    "display_description": "Get detailed information about a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Request details including headers, cookies, and body.",
                    "display_name": "get_request_details",
                    "name": "get_request_details",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_request_details"
                    ]
                  },
                  {
                    "args": {
                      "request_id": {
                        "title": "Request Id",
                        "type": "string"
                      }
                    },
                    "description": "Get response details for a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Response details including status, headers, and metadata.",
                    "display_description": "Get response details for a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Response details including status, headers, and metadata.",
                    "display_name": "get_response_details",
                    "name": "get_response_details",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_response_details"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "request_id": {
                        "title": "Request Id",
                        "type": "string"
                      }
                    },
                    "description": "Get response body content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[str]: Response body as text (base64 encoded for binary).",
                    "display_description": "Get response body content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[str]: Response body as text (base64 encoded for binary).",
                    "display_name": "get_response_content",
                    "name": "get_response_content",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_response_content"
                    ]
                  },
                  {
                    "args": {
                      "headers": {
                        "$ref": "#/$defs/AnonModel0"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Modify request headers for future requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    headers (Dict[str, str]): Headers to add/modify.\n\nReturns:\n    bool: True if modified successfully.",
                    "display_description": "Modify request headers for future requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    headers (Dict[str, str]): Headers to add/modify.\n\nReturns:\n    bool: True if modified successfully.",
                    "display_name": "modify_headers",
                    "name": "modify_headers",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "modify_headers"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "urls": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Urls"
                      }
                    },
                    "description": "Get cookies for current page or specific URLs.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    urls (Optional[List[str]]): Optional list of URLs to get cookies for.\n\nReturns:\n    List[Dict[str, Any]]: List of cookies.",
                    "display_description": "Get cookies for current page or specific URLs.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    urls (Optional[List[str]]): Optional list of URLs to get cookies for.\n\nReturns:\n    List[Dict[str, Any]]: List of cookies.",
                    "display_name": "get_cookies",
                    "name": "get_cookies",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_cookies"
                    ]
                  },
                  {
                    "args": {
                      "domain": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Domain"
                      },
                      "http_only": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Http Only"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "path": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "/",
                        "title": "Path"
                      },
                      "same_site": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Same Site"
                      },
                      "secure": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Secure"
                      },
                      "url": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Url"
                      },
                      "value": {
                        "title": "Value",
                        "type": "string"
                      }
                    },
                    "description": "Set a cookie.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    name (str): Cookie name.\n    value (str): Cookie value.\n    url (Optional[str]): The request-URI to associate with the cookie.\n    domain (Optional[str]): Cookie domain.\n    path (str): Cookie path.\n    secure (bool): Secure flag.\n    http_only (bool): HttpOnly flag.\n    same_site (Optional[str]): SameSite attribute ('Strict', 'Lax', or 'None').\n\nReturns:\n    bool: True if set successfully.",
                    "display_description": "Set a cookie.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    name (str): Cookie name.\n    value (str): Cookie value.\n    url (Optional[str]): The request-URI to associate with the cookie.\n    domain (Optional[str]): Cookie domain.\n    path (str): Cookie path.\n    secure (bool): Secure flag.\n    http_only (bool): HttpOnly flag.\n    same_site (Optional[str]): SameSite attribute ('Strict', 'Lax', or 'None').\n\nReturns:\n    bool: True if set successfully.",
                    "display_name": "set_cookie",
                    "name": "set_cookie",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "set_cookie"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "url": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Url"
                      }
                    },
                    "description": "Clear cookies.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (Optional[str]): Optional URL to clear cookies for (clears all if not specified).\n\nReturns:\n    bool: True if cleared successfully.",
                    "display_description": "Clear cookies.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (Optional[str]): Optional URL to clear cookies for (clears all if not specified).\n\nReturns:\n    bool: True if cleared successfully.",
                    "display_name": "clear_cookies",
                    "name": "clear_cookies",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clear_cookies"
                    ]
                  },
                  {
                    "args": {
                      "include_all": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include All"
                      },
                      "max_errors": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 50,
                        "title": "Max Errors"
                      },
                      "max_info": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 50,
                        "title": "Max Info"
                      },
                      "max_warnings": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 50,
                        "title": "Max Warnings"
                      }
                    },
                    "description": "Get comprehensive debug view with all logged errors and statistics.\n\nArgs:\n    max_errors (int): Maximum number of errors to include (default: 50).\n    max_warnings (int): Maximum number of warnings to include (default: 50).\n    max_info (int): Maximum number of info logs to include (default: 50).\n    include_all (bool): Include all logs regardless of limits (default: False).\n\nReturns:\n    Dict[str, Any]: Debug information including errors, warnings, and statistics.",
                    "display_description": "Get comprehensive debug view with all logged errors and statistics.\n\nArgs:\n    max_errors (int): Maximum number of errors to include (default: 50).\n    max_warnings (int): Maximum number of warnings to include (default: 50).\n    max_info (int): Maximum number of info logs to include (default: 50).\n    include_all (bool): Include all logs regardless of limits (default: False).\n\nReturns:\n    Dict[str, Any]: Debug information including errors, warnings, and statistics.",
                    "display_name": "get_debug_view",
                    "name": "get_debug_view",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_debug_view"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Clear all debug logs and statistics with timeout protection.\n\nReturns:\n    bool: True if cleared successfully.",
                    "display_description": "Clear all debug logs and statistics with timeout protection.\n\nReturns:\n    bool: True if cleared successfully.",
                    "display_name": "clear_debug_view",
                    "name": "clear_debug_view",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clear_debug_view"
                    ]
                  },
                  {
                    "args": {
                      "filename": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "debug_log.json",
                        "title": "Filename"
                      },
                      "format": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "auto",
                        "title": "Format"
                      },
                      "include_all": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include All"
                      },
                      "max_errors": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 100,
                        "title": "Max Errors"
                      },
                      "max_info": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 100,
                        "title": "Max Info"
                      },
                      "max_warnings": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 100,
                        "title": "Max Warnings"
                      }
                    },
                    "description": "Export debug logs to a file using the fastest available method with timeout protection.\n\nArgs:\n    filename (str): Name of the file to export to.\n    max_errors (int): Maximum number of errors to export (default: 100).\n    max_warnings (int): Maximum number of warnings to export (default: 100).\n    max_info (int): Maximum number of info logs to export (default: 100).\n    include_all (bool): Include all logs regardless of limits (default: False).\n    format (str): Export format: 'json', 'pickle', 'gzip-pickle', 'auto' (default: 'auto').\n                 'auto' chooses fastest format based on data size:\n                 - Small data (<100 items): JSON (human readable)\n                 - Medium data (100-1000 items): Pickle (fast binary)\n                 - Large data (>1000 items): Gzip-Pickle (fastest, compressed)\n\nReturns:\n    str: Path to the exported file.",
                    "display_description": "Export debug logs to a file using the fastest available method with timeout protection.\n\nArgs:\n    filename (str): Name of the file to export to.\n    max_errors (int): Maximum number of errors to export (default: 100).\n    max_warnings (int): Maximum number of warnings to export (default: 100).\n    max_info (int): Maximum number of info logs to export (default: 100).\n    include_all (bool): Include all logs regardless of limits (default: False).\n    format (str): Export format: 'json', 'pickle', 'gzip-pickle', 'auto' (default: 'auto').\n                 'auto' chooses fastest format based on data size:\n                 - Small data (<100 items): JSON (human readable)\n                 - Medium data (100-1000 items): Pickle (fast binary)\n                 - Large data (>1000 items): Gzip-Pickle (fastest, compressed)\n\nReturns:\n    str: Path to the exported file.",
                    "display_name": "export_debug_logs",
                    "name": "export_debug_logs",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "export_debug_logs"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get current debug logger lock status for debugging hanging exports.\n\nReturns:\n    Dict[str, Any]: Lock status information.",
                    "display_description": "Get current debug logger lock status for debugging hanging exports.\n\nReturns:\n    Dict[str, Any]: Lock status information.",
                    "display_name": "get_debug_lock_status",
                    "name": "get_debug_lock_status",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_debug_lock_status"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "List all tabs for a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, str]]: List of tabs with their details.",
                    "display_description": "List all tabs for a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, str]]: List of tabs with their details.",
                    "display_name": "list_tabs",
                    "name": "list_tabs",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_tabs"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "tab_id": {
                        "title": "Tab Id",
                        "type": "string"
                      }
                    },
                    "description": "Switch to a specific tab by bringing it to front.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Target tab ID to switch to.\n\nReturns:\n    bool: True if switched successfully.",
                    "display_description": "Switch to a specific tab by bringing it to front.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Target tab ID to switch to.\n\nReturns:\n    bool: True if switched successfully.",
                    "display_name": "switch_tab",
                    "name": "switch_tab",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "switch_tab"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "tab_id": {
                        "title": "Tab Id",
                        "type": "string"
                      }
                    },
                    "description": "Close a specific tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Tab ID to close.\n\nReturns:\n    bool: True if closed successfully.",
                    "display_description": "Close a specific tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Tab ID to close.\n\nReturns:\n    bool: True if closed successfully.",
                    "display_name": "close_tab",
                    "name": "close_tab",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "close_tab"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Get information about the currently active tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Dict[str, Any]: Active tab information.",
                    "display_description": "Get information about the currently active tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Dict[str, Any]: Active tab information.",
                    "display_name": "get_active_tab",
                    "name": "get_active_tab",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_active_tab"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "url": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "about:blank",
                        "title": "Url"
                      }
                    },
                    "description": "Open a new tab in the browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to open in the new tab.\n\nReturns:\n    Dict[str, Any]: New tab information.",
                    "display_description": "Open a new tab in the browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to open in the new tab.\n\nReturns:\n    Dict[str, Any]: New tab information.",
                    "display_name": "new_tab",
                    "name": "new_tab",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "new_tab"
                    ]
                  },
                  {
                    "args": {
                      "include_computed": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Computed"
                      },
                      "include_css_rules": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Css Rules"
                      },
                      "include_inheritance": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Inheritance"
                      },
                      "include_pseudo": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Pseudo"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract complete styling information from an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles (::before, ::after).\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: Complete styling data including computed styles, CSS rules, pseudo-elements.",
                    "display_description": "Extract complete styling information from an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles (::before, ::after).\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: Complete styling data including computed styles, CSS rules, pseudo-elements.",
                    "display_name": "extract_element_styles",
                    "name": "extract_element_styles",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_styles"
                    ]
                  },
                  {
                    "args": {
                      "include_attributes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Attributes"
                      },
                      "include_children": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Children"
                      },
                      "include_data_attributes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Data Attributes"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "max_depth": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 3,
                        "title": "Max Depth"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract complete HTML structure and DOM information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes specifically.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: HTML structure, attributes, position, and children data.",
                    "display_description": "Extract complete HTML structure and DOM information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes specifically.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: HTML structure, attributes, position, and children data.",
                    "display_name": "extract_element_structure",
                    "name": "extract_element_structure",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_structure"
                    ]
                  },
                  {
                    "args": {
                      "analyze_handlers": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Analyze Handlers"
                      },
                      "include_framework": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Framework"
                      },
                      "include_inline": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Inline"
                      },
                      "include_listeners": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Listeners"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract complete event listener and JavaScript handler information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers (onclick, etc.).\n    include_listeners (bool): Include addEventListener attached handlers.\n    include_framework (bool): Include framework-specific handlers (React, Vue, etc.).\n    analyze_handlers (bool): Analyze handler functions for full details (can be large).\n\nReturns:\n    Dict[str, Any]: Event listeners, inline handlers, framework handlers, detected frameworks.",
                    "display_description": "Extract complete event listener and JavaScript handler information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers (onclick, etc.).\n    include_listeners (bool): Include addEventListener attached handlers.\n    include_framework (bool): Include framework-specific handlers (React, Vue, etc.).\n    analyze_handlers (bool): Analyze handler functions for full details (can be large).\n\nReturns:\n    Dict[str, Any]: Event listeners, inline handlers, framework handlers, detected frameworks.",
                    "display_name": "extract_element_events",
                    "name": "extract_element_events",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_events"
                    ]
                  },
                  {
                    "args": {
                      "analyze_keyframes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Analyze Keyframes"
                      },
                      "include_css_animations": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Css Animations"
                      },
                      "include_transforms": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Transforms"
                      },
                      "include_transitions": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Transitions"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract CSS animations, transitions, and transforms.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS @keyframes animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: Animation data, transition data, transform data, keyframe rules.",
                    "display_description": "Extract CSS animations, transitions, and transforms.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS @keyframes animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: Animation data, transition data, transform data, keyframe rules.",
                    "display_name": "extract_element_animations",
                    "name": "extract_element_animations",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_animations"
                    ]
                  },
                  {
                    "args": {
                      "fetch_external": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Fetch External"
                      },
                      "include_backgrounds": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Backgrounds"
                      },
                      "include_fonts": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Fonts"
                      },
                      "include_images": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Images"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract all assets related to an element (images, fonts, etc.).\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include img src and related images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Whether to fetch external assets for analysis.\n\nReturns:\n    Dict[str, Any]: Images, background images, fonts, icons, videos, audio assets.",
                    "display_description": "Extract all assets related to an element (images, fonts, etc.).\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include img src and related images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Whether to fetch external assets for analysis.\n\nReturns:\n    Dict[str, Any]: Images, background images, fonts, icons, videos, audio assets.",
                    "display_name": "extract_element_assets",
                    "name": "extract_element_assets",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_assets"
                    ]
                  },
                  {
                    "args": {
                      "include_computed": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Computed"
                      },
                      "include_css_rules": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Css Rules"
                      },
                      "include_inheritance": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Inheritance"
                      },
                      "include_pseudo": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Pseudo"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element styles using direct CDP calls (no JavaScript evaluation).\nThis prevents hanging issues by using nodriver's native CDP methods.\n\nArgs:\n    instance_id (str): Browser instance ID\n    selector (str): CSS selector for the element\n    include_computed (bool): Include computed styles\n    include_css_rules (bool): Include matching CSS rules\n    include_pseudo (bool): Include pseudo-element styles\n    include_inheritance (bool): Include style inheritance chain\n\nReturns:\n    Dict[str, Any]: Styling data extracted using CDP",
                    "display_description": "Extract element styles using direct CDP calls (no JavaScript evaluation).\nThis prevents hanging issues by using nodriver's native CDP methods.\n\nArgs:\n    instance_id (str): Browser instance ID\n    selector (str): CSS selector for the element\n    include_computed (bool): Include computed styles\n    include_css_rules (bool): Include matching CSS rules\n    include_pseudo (bool): Include pseudo-element styles\n    include_inheritance (bool): Include style inheritance chain\n\nReturns:\n    Dict[str, Any]: Styling data extracted using CDP",
                    "display_name": "extract_element_styles_cdp",
                    "name": "extract_element_styles_cdp",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_styles_cdp"
                    ]
                  },
                  {
                    "args": {
                      "analyze_css": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Analyze Css"
                      },
                      "analyze_js": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Analyze Js"
                      },
                      "follow_imports": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Follow Imports"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "max_depth": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 2,
                        "title": "Max Depth"
                      }
                    },
                    "description": "Discover and analyze related CSS/JS files for context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    analyze_css (bool): Analyze linked CSS files.\n    analyze_js (bool): Analyze linked JS files.\n    follow_imports (bool): Follow @import and module imports (uses network).\n    max_depth (int): Maximum depth for following imports.\n\nReturns:\n    Dict[str, Any]: Stylesheets, scripts, imports, modules, framework detection.",
                    "display_description": "Discover and analyze related CSS/JS files for context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    analyze_css (bool): Analyze linked CSS files.\n    analyze_js (bool): Analyze linked JS files.\n    follow_imports (bool): Follow @import and module imports (uses network).\n    max_depth (int): Maximum depth for following imports.\n\nReturns:\n    Dict[str, Any]: Stylesheets, scripts, imports, modules, framework detection.",
                    "display_name": "extract_related_files",
                    "name": "extract_related_files",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_related_files"
                    ]
                  },
                  {
                    "args": {
                      "extraction_options": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Extraction Options"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Master function that extracts ALL element data using specialized functions.\n\nThis is the ultimate element cloning tool that combines all extraction methods.\nUse this when you want complete element fidelity for recreation or analysis.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): Dict specifying what to extract and options for each.\n        Example: {\n            'styles': {'include_computed': True, 'include_pseudo': True},\n            'structure': {'include_children': True, 'max_depth': 2},\n            'events': {'include_framework': True, 'analyze_handlers': False},\n            'animations': {'analyze_keyframes': True},\n            'assets': {'fetch_external': False},\n            'related_files': {'follow_imports': True, 'max_depth': 1}\n        }\n\nReturns:\n    Dict[str, Any]: Complete element clone with styles, structure, events, animations, assets, related files.",
                    "display_description": "Master function that extracts ALL element data using specialized functions.\n\nThis is the ultimate element cloning tool that combines all extraction methods.\nUse this when you want complete element fidelity for recreation or analysis.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): Dict specifying what to extract and options for each.\n        Example: {\n            'styles': {'include_computed': True, 'include_pseudo': True},\n            'structure': {'include_children': True, 'max_depth': 2},\n            'events': {'include_framework': True, 'analyze_handlers': False},\n            'animations': {'analyze_keyframes': True},\n            'assets': {'fetch_external': False},\n            'related_files': {'follow_imports': True, 'max_depth': 1}\n        }\n\nReturns:\n    Dict[str, Any]: Complete element clone with styles, structure, events, animations, assets, related files.",
                    "display_name": "clone_element_complete",
                    "name": "clone_element_complete",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clone_element_complete"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Hot reload all modules without restarting the server.\n\nReturns:\n    str: Status message.",
                    "display_description": "Hot reload all modules without restarting the server.\n\nReturns:\n    str: Status message.",
                    "display_name": "hot_reload",
                    "name": "hot_reload",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "hot_reload"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Check the status of loaded modules.\n\nReturns:\n    str: Module status information.",
                    "display_description": "Check the status of loaded modules.\n\nReturns:\n    str: Module status information.",
                    "display_name": "reload_status",
                    "name": "reload_status",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "reload_status"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Validate browser environment and diagnose potential issues.\n\nReturns:\n    Dict[str, Any]: Environment validation results with platform info and recommendations",
                    "display_description": "Validate browser environment and diagnose potential issues.\n\nReturns:\n    Dict[str, Any]: Environment validation results with platform info and recommendations",
                    "display_name": "validate_browser_environment_tool",
                    "name": "validate_browser_environment_tool",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "validate_browser_environment_tool"
                    ]
                  },
                  {
                    "args": {
                      "include_children": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Children"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Clone element progressively - returns lightweight base structure with element_id.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to extract child elements.\n\nReturns:\n    Dict[str, Any]: Base structure with element_id for progressive expansion.",
                    "display_description": "Clone element progressively - returns lightweight base structure with element_id.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to extract child elements.\n\nReturns:\n    Dict[str, Any]: Base structure with element_id for progressive expansion.",
                    "display_name": "clone_element_progressive",
                    "name": "clone_element_progressive",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clone_element_progressive"
                    ]
                  },
                  {
                    "args": {
                      "categories": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Categories"
                      },
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      },
                      "properties": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Properties"
                      }
                    },
                    "description": "Expand styles data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    categories (Optional[List[str]]): Style categories to include (layout, typography, colors, spacing, borders, backgrounds, effects, animation).\n    properties (Optional[List[str]]): Specific CSS property names to include.\n\nReturns:\n    Dict[str, Any]: Filtered styles data.",
                    "display_description": "Expand styles data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    categories (Optional[List[str]]): Style categories to include (layout, typography, colors, spacing, borders, backgrounds, effects, animation).\n    properties (Optional[List[str]]): Specific CSS property names to include.\n\nReturns:\n    Dict[str, Any]: Filtered styles data.",
                    "display_name": "expand_styles",
                    "name": "expand_styles",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_styles"
                    ]
                  },
                  {
                    "args": {
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      },
                      "event_types": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Event Types"
                      }
                    },
                    "description": "Expand event listeners data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    event_types (Optional[List[str]]): Event types or sources to include (click, react, inline, addEventListener).\n\nReturns:\n    Dict[str, Any]: Filtered event listeners data.",
                    "display_description": "Expand event listeners data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    event_types (Optional[List[str]]): Event types or sources to include (click, react, inline, addEventListener).\n\nReturns:\n    Dict[str, Any]: Filtered event listeners data.",
                    "display_name": "expand_events",
                    "name": "expand_events",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_events"
                    ]
                  },
                  {
                    "args": {
                      "depth_range": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Depth Range"
                      },
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      },
                      "max_count": {
                        "anyOf": [
                          {},
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Max Count"
                      }
                    },
                    "description": "Expand children data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    depth_range (Optional[List]): [min_depth, max_depth] range to include.\n    max_count (Optional[Any]): Maximum number of children to return.\n\nReturns:\n    Dict[str, Any]: Filtered children data.",
                    "display_description": "Expand children data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    depth_range (Optional[List]): [min_depth, max_depth] range to include.\n    max_count (Optional[Any]): Maximum number of children to return.\n\nReturns:\n    Dict[str, Any]: Filtered children data.",
                    "display_name": "expand_children",
                    "name": "expand_children",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_children"
                    ]
                  },
                  {
                    "args": {
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      },
                      "source_types": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Source Types"
                      }
                    },
                    "description": "Expand CSS rules data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    source_types (Optional[List[str]]): CSS rule sources to include (inline, external stylesheet URLs).\n\nReturns:\n    Dict[str, Any]: Filtered CSS rules data.",
                    "display_description": "Expand CSS rules data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    source_types (Optional[List[str]]): CSS rule sources to include (inline, external stylesheet URLs).\n\nReturns:\n    Dict[str, Any]: Filtered CSS rules data.",
                    "display_name": "expand_css_rules",
                    "name": "expand_css_rules",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_css_rules"
                    ]
                  },
                  {
                    "args": {
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      }
                    },
                    "description": "Expand pseudo-elements data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Pseudo-elements data (::before, ::after, etc.).",
                    "display_description": "Expand pseudo-elements data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Pseudo-elements data (::before, ::after, etc.).",
                    "display_name": "expand_pseudo_elements",
                    "name": "expand_pseudo_elements",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_pseudo_elements"
                    ]
                  },
                  {
                    "args": {
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      }
                    },
                    "description": "Expand animations and fonts data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Animations, transitions, and fonts data.",
                    "display_description": "Expand animations and fonts data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Animations, transitions, and fonts data.",
                    "display_name": "expand_animations",
                    "name": "expand_animations",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "expand_animations"
                    ]
                  },
                  {
                    "args": {},
                    "description": "List all stored elements with their basic info.\n\nReturns:\n    Dict[str, Any]: List of stored elements with metadata.",
                    "display_description": "List all stored elements with their basic info.\n\nReturns:\n    Dict[str, Any]: List of stored elements with metadata.",
                    "display_name": "list_stored_elements",
                    "name": "list_stored_elements",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_stored_elements"
                    ]
                  },
                  {
                    "args": {
                      "element_id": {
                        "title": "Element Id",
                        "type": "string"
                      }
                    },
                    "description": "Clear a specific stored element.\n\nArgs:\n    element_id (str): Element ID to clear.\n\nReturns:\n    Dict[str, Any]: Success/error message.",
                    "display_description": "Clear a specific stored element.\n\nArgs:\n    element_id (str): Element ID to clear.\n\nReturns:\n    Dict[str, Any]: Success/error message.",
                    "display_name": "clear_stored_element",
                    "name": "clear_stored_element",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clear_stored_element"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Clear all stored elements.\n\nReturns:\n    Dict[str, Any]: Success message.",
                    "display_description": "Clear all stored elements.\n\nReturns:\n    Dict[str, Any]: Success message.",
                    "display_name": "clear_all_elements",
                    "name": "clear_all_elements",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clear_all_elements"
                    ]
                  },
                  {
                    "args": {
                      "extraction_options": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Extraction Options"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Clone element completely and save to file, returning file path instead of full data.\n\nThis is ideal when you want complete element data but don't want to overwhelm\nthe response with large JSON objects. The data is saved to a JSON file that\ncan be read later.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): JSON string with extraction options.\n\nReturns:\n    Dict[str, Any]: File path and summary information about the cloned element.",
                    "display_description": "Clone element completely and save to file, returning file path instead of full data.\n\nThis is ideal when you want complete element data but don't want to overwhelm\nthe response with large JSON objects. The data is saved to a JSON file that\ncan be read later.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): JSON string with extraction options.\n\nReturns:\n    Dict[str, Any]: File path and summary information about the cloned element.",
                    "display_name": "clone_element_to_file",
                    "name": "clone_element_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "clone_element_to_file"
                    ]
                  },
                  {
                    "args": {
                      "include_children": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Children"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract complete element using working comprehensive cloner and save to file.\n\nThis uses the proven comprehensive extraction logic that returns large amounts\nof data, but saves it to a file instead of overwhelming the response.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: File path and concise summary instead of massive data dump.",
                    "display_description": "Extract complete element using working comprehensive cloner and save to file.\n\nThis uses the proven comprehensive extraction logic that returns large amounts\nof data, but saves it to a file instead of overwhelming the response.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: File path and concise summary instead of massive data dump.",
                    "display_name": "extract_complete_element_to_file",
                    "name": "extract_complete_element_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_complete_element_to_file"
                    ]
                  },
                  {
                    "args": {
                      "include_children": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Children"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract complete element using native CDP methods for 100% accuracy.\n\nThis uses Chrome DevTools Protocol's native methods to extract:\n- Complete computed styles via CSS.getComputedStyleForNode\n- Matched CSS rules via CSS.getMatchedStylesForNode  \n- Event listeners via DOMDebugger.getEventListeners\n- Complete DOM structure and attributes\n\nThis provides the most accurate element cloning possible by bypassing\nJavaScript limitations and using CDP's direct browser access.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: Complete element data with 100% accuracy.",
                    "display_description": "Extract complete element using native CDP methods for 100% accuracy.\n\nThis uses Chrome DevTools Protocol's native methods to extract:\n- Complete computed styles via CSS.getComputedStyleForNode\n- Matched CSS rules via CSS.getMatchedStylesForNode  \n- Event listeners via DOMDebugger.getEventListeners\n- Complete DOM structure and attributes\n\nThis provides the most accurate element cloning possible by bypassing\nJavaScript limitations and using CDP's direct browser access.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: Complete element data with 100% accuracy.",
                    "display_name": "extract_complete_element_cdp",
                    "name": "extract_complete_element_cdp",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_complete_element_cdp"
                    ]
                  },
                  {
                    "args": {
                      "include_computed": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Computed"
                      },
                      "include_css_rules": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Css Rules"
                      },
                      "include_inheritance": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Inheritance"
                      },
                      "include_pseudo": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Pseudo"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element styles and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles.\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted styles.",
                    "display_description": "Extract element styles and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles.\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted styles.",
                    "display_name": "extract_element_styles_to_file",
                    "name": "extract_element_styles_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_styles_to_file"
                    ]
                  },
                  {
                    "args": {
                      "include_attributes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Attributes"
                      },
                      "include_children": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Include Children"
                      },
                      "include_data_attributes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Data Attributes"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "max_depth": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 3,
                        "title": "Max Depth"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element structure and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted structure.",
                    "display_description": "Extract element structure and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted structure.",
                    "display_name": "extract_element_structure_to_file",
                    "name": "extract_element_structure_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_structure_to_file"
                    ]
                  },
                  {
                    "args": {
                      "analyze_handlers": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Analyze Handlers"
                      },
                      "include_framework": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Framework"
                      },
                      "include_inline": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Inline"
                      },
                      "include_listeners": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Listeners"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element events and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers.\n    include_listeners (bool): Include addEventListener handlers.\n    include_framework (bool): Include framework-specific handlers.\n    analyze_handlers (bool): Analyze handler functions.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted events.",
                    "display_description": "Extract element events and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers.\n    include_listeners (bool): Include addEventListener handlers.\n    include_framework (bool): Include framework-specific handlers.\n    analyze_handlers (bool): Analyze handler functions.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted events.",
                    "display_name": "extract_element_events_to_file",
                    "name": "extract_element_events_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_events_to_file"
                    ]
                  },
                  {
                    "args": {
                      "analyze_keyframes": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Analyze Keyframes"
                      },
                      "include_css_animations": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Css Animations"
                      },
                      "include_transforms": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Transforms"
                      },
                      "include_transitions": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Transitions"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element animations and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted animations.",
                    "display_description": "Extract element animations and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted animations.",
                    "display_name": "extract_element_animations_to_file",
                    "name": "extract_element_animations_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_animations_to_file"
                    ]
                  },
                  {
                    "args": {
                      "fetch_external": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "title": "Fetch External"
                      },
                      "include_backgrounds": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Backgrounds"
                      },
                      "include_fonts": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Fonts"
                      },
                      "include_images": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": true,
                        "title": "Include Images"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "selector": {
                        "title": "Selector",
                        "type": "string"
                      }
                    },
                    "description": "Extract element assets and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Fetch external assets.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted assets.",
                    "display_description": "Extract element assets and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Fetch external assets.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted assets.",
                    "display_name": "extract_element_assets_to_file",
                    "name": "extract_element_assets_to_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "extract_element_assets_to_file"
                    ]
                  },
                  {
                    "args": {},
                    "description": "List all element clone files saved to disk.\n\nReturns:\n    List[Dict[str, Any]]: List of clone files with metadata and file information.",
                    "display_description": "List all element clone files saved to disk.\n\nReturns:\n    List[Dict[str, Any]]: List of clone files with metadata and file information.",
                    "display_name": "list_clone_files",
                    "name": "list_clone_files",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_clone_files"
                    ]
                  },
                  {
                    "args": {
                      "max_age_hours": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 24,
                        "title": "Max Age Hours"
                      }
                    },
                    "description": "Clean up old clone files to save disk space.\n\nArgs:\n    max_age_hours (int): Maximum age in hours for files to keep.\n\nReturns:\n    Dict[str, int]: Number of files deleted.",
                    "display_description": "Clean up old clone files to save disk space.\n\nArgs:\n    max_age_hours (int): Maximum age in hours for files to keep.\n\nReturns:\n    Dict[str, int]: Number of files deleted.",
                    "display_name": "cleanup_clone_files",
                    "name": "cleanup_clone_files",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "cleanup_clone_files"
                    ]
                  },
                  {
                    "args": {},
                    "description": "List all available CDP Runtime commands for function execution.\n\nReturns:\n    List[str]: List of available CDP command names.",
                    "display_description": "List all available CDP Runtime commands for function execution.\n\nReturns:\n    List[str]: List of available CDP command names.",
                    "display_name": "list_cdp_commands",
                    "name": "list_cdp_commands",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_cdp_commands"
                    ]
                  },
                  {
                    "args": {
                      "command": {
                        "title": "Command",
                        "type": "string"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "params": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/AnonModel0"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null
                      }
                    },
                    "description": "Execute any CDP Runtime command with given parameters.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    command (str): CDP command name (e.g., 'evaluate', 'callFunctionOn').\n    params (Dict[str, Any], optional): Command parameters as a dictionary.\n            IMPORTANT: Use snake_case parameter names (e.g., 'return_by_value') \n            NOT camelCase ('returnByValue'). The nodriver library expects \n            Python-style parameter names.\n\nReturns:\n    Dict[str, Any]: Command execution result.\n    \nExample:\n    # Correct - use snake_case\n    params = {\"expression\": \"document.title\", \"return_by_value\": True}\n    \n    params = {\"expression\": \"document.title\", \"returnByValue\": True}",
                    "display_description": "Execute any CDP Runtime command with given parameters.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    command (str): CDP command name (e.g., 'evaluate', 'callFunctionOn').\n    params (Dict[str, Any], optional): Command parameters as a dictionary.\n            IMPORTANT: Use snake_case parameter names (e.g., 'return_by_value') \n            NOT camelCase ('returnByValue'). The nodriver library expects \n            Python-style parameter names.\n\nReturns:\n    Dict[str, Any]: Command execution result.\n    \nExample:\n    # Correct - use snake_case\n    params = {\"expression\": \"document.title\", \"return_by_value\": True}\n    \n    params = {\"expression\": \"document.title\", \"returnByValue\": True}",
                    "display_name": "execute_cdp_command",
                    "name": "execute_cdp_command",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_cdp_command"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Get all available JavaScript execution contexts.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, Any]]: List of execution contexts with their details.",
                    "display_description": "Get all available JavaScript execution contexts.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, Any]]: List of execution contexts with their details.",
                    "display_name": "get_execution_contexts",
                    "name": "get_execution_contexts",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_execution_contexts"
                    ]
                  },
                  {
                    "args": {
                      "context_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Context Id"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Discover all global JavaScript functions available in the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    List[Dict[str, Any]]: List of discovered functions with their details.",
                    "display_description": "Discover all global JavaScript functions available in the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    List[Dict[str, Any]]: List of discovered functions with their details.",
                    "display_name": "discover_global_functions",
                    "name": "discover_global_functions",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "discover_global_functions"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "object_path": {
                        "title": "Object Path",
                        "type": "string"
                      }
                    },
                    "description": "Discover methods of a specific JavaScript object.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    object_path (str): Path to the object (e.g., 'document', 'window.localStorage').\n\nReturns:\n    List[Dict[str, Any]]: List of discovered methods.",
                    "display_description": "Discover methods of a specific JavaScript object.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    object_path (str): Path to the object (e.g., 'document', 'window.localStorage').\n\nReturns:\n    List[Dict[str, Any]]: List of discovered methods.",
                    "display_name": "discover_object_methods",
                    "name": "discover_object_methods",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "discover_object_methods"
                    ]
                  },
                  {
                    "args": {
                      "args": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Args"
                      },
                      "function_path": {
                        "title": "Function Path",
                        "type": "string"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Call a JavaScript function with arguments.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function (e.g., 'document.getElementById').\n    args (List[Any], optional): List of arguments to pass to the function.\n\nReturns:\n    Dict[str, Any]: Function call result.",
                    "display_description": "Call a JavaScript function with arguments.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function (e.g., 'document.getElementById').\n    args (List[Any], optional): List of arguments to pass to the function.\n\nReturns:\n    Dict[str, Any]: Function call result.",
                    "display_name": "call_javascript_function",
                    "name": "call_javascript_function",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "call_javascript_function"
                    ]
                  },
                  {
                    "args": {
                      "function_path": {
                        "title": "Function Path",
                        "type": "string"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Inspect a JavaScript function's signature and details.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function.\n\nReturns:\n    Dict[str, Any]: Function signature and details.",
                    "display_description": "Inspect a JavaScript function's signature and details.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function.\n\nReturns:\n    Dict[str, Any]: Function signature and details.",
                    "display_name": "inspect_function_signature",
                    "name": "inspect_function_signature",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "inspect_function_signature"
                    ]
                  },
                  {
                    "args": {
                      "context_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Context Id"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "script_code": {
                        "title": "Script Code",
                        "type": "string"
                      }
                    },
                    "description": "Inject and execute custom JavaScript code.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script_code (str): JavaScript code to execute.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
                    "display_description": "Inject and execute custom JavaScript code.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script_code (str): JavaScript code to execute.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
                    "display_name": "inject_and_execute_script",
                    "name": "inject_and_execute_script",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "inject_and_execute_script"
                    ]
                  },
                  {
                    "args": {
                      "function_code": {
                        "title": "Function Code",
                        "type": "string"
                      },
                      "function_name": {
                        "title": "Function Name",
                        "type": "string"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Create a persistent JavaScript function that survives page reloads.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_name (str): Name for the function.\n    function_code (str): JavaScript function code.\n\nReturns:\n    Dict[str, Any]: Function creation result.",
                    "display_description": "Create a persistent JavaScript function that survives page reloads.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_name (str): Name for the function.\n    function_code (str): JavaScript function code.\n\nReturns:\n    Dict[str, Any]: Function creation result.",
                    "display_name": "create_persistent_function",
                    "name": "create_persistent_function",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_persistent_function"
                    ]
                  },
                  {
                    "args": {
                      "function_calls": {
                        "items": {
                          "$ref": "#/$defs/AnonModel0"
                        },
                        "title": "Function Calls",
                        "type": "array"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      }
                    },
                    "description": "Execute a sequence of JavaScript function calls.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_calls (List[Dict[str, Any]]): List of function calls, each with 'function_path', 'args', and optional 'context_id'.\n\nReturns:\n    List[Dict[str, Any]]: List of function call results.",
                    "display_description": "Execute a sequence of JavaScript function calls.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_calls (List[Dict[str, Any]]): List of function calls, each with 'function_path', 'args', and optional 'context_id'.\n\nReturns:\n    List[Dict[str, Any]]: List of function call results.",
                    "display_name": "execute_function_sequence",
                    "name": "execute_function_sequence",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_function_sequence"
                    ]
                  },
                  {
                    "args": {
                      "binding_name": {
                        "title": "Binding Name",
                        "type": "string"
                      },
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "python_code": {
                        "title": "Python Code",
                        "type": "string"
                      }
                    },
                    "description": "Create a binding that allows JavaScript to call Python functions.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    binding_name (str): Name for the binding.\n    python_code (str): Python function code (as string).\n\nReturns:\n    Dict[str, Any]: Binding creation result.",
                    "display_description": "Create a binding that allows JavaScript to call Python functions.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    binding_name (str): Name for the binding.\n    python_code (str): Python function code (as string).\n\nReturns:\n    Dict[str, Any]: Binding creation result.",
                    "display_name": "create_python_binding",
                    "name": "create_python_binding",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_python_binding"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "title": "Instance Id",
                        "type": "string"
                      },
                      "python_code": {
                        "title": "Python Code",
                        "type": "string"
                      }
                    },
                    "description": "Execute Python code by translating it to JavaScript.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    python_code (str): Python code to translate and execute.\n\nReturns:\n    Dict[str, Any]: Execution result.",
                    "display_description": "Execute Python code by translating it to JavaScript.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    python_code (str): Python code to translate and execute.\n\nReturns:\n    Dict[str, Any]: Execution result.",
                    "display_name": "execute_python_in_browser",
                    "name": "execute_python_in_browser",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_python_in_browser"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Instance Id"
                      }
                    },
                    "description": "Get information about the CDP function executor state.\n\nArgs:\n    instance_id (str, optional): Optional browser instance ID for specific info.\n\nReturns:\n    Dict[str, Any]: Function executor state and capabilities.",
                    "display_description": "Get information about the CDP function executor state.\n\nArgs:\n    instance_id (str, optional): Optional browser instance ID for specific info.\n\nReturns:\n    Dict[str, Any]: Function executor state and capabilities.",
                    "display_name": "get_function_executor_info",
                    "name": "get_function_executor_info",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_function_executor_info"
                    ]
                  },
                  {
                    "args": {
                      "function_code": {
                        "title": "Function Code",
                        "type": "string"
                      },
                      "instance_ids": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Instance Ids"
                      },
                      "name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "priority": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 100,
                        "title": "Priority"
                      },
                      "requirements": {
                        "$ref": "#/$defs/AnonModel0"
                      }
                    },
                    "description": "Create a new dynamic hook with AI-generated Python function.\n\nThis is the new powerful hook system that allows AI to write custom Python functions\nthat process network requests in real-time with no pending state.\n\nArgs:\n    name (str): Human-readable hook name\n    requirements (Dict[str, Any]): Matching criteria (url_pattern, method, resource_type, custom_condition)\n    function_code (str): Python function code that processes requests (must define process_request(request))\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to (all if None)\n    priority (int): Hook priority (lower = higher priority)\n    \nReturns:\n    Dict[str, Any]: Hook creation result with hook_id\n    \nExample function_code:\n    ```python\n    def process_request(request):\n        if \"example.com\" in request[\"url\"]:\n            return HookAction(action=\"redirect\", url=\"https://httpbin.org/get\")\n        return HookAction(action=\"continue\")\n    ```",
                    "display_description": "Create a new dynamic hook with AI-generated Python function.\n\nThis is the new powerful hook system that allows AI to write custom Python functions\nthat process network requests in real-time with no pending state.\n\nArgs:\n    name (str): Human-readable hook name\n    requirements (Dict[str, Any]): Matching criteria (url_pattern, method, resource_type, custom_condition)\n    function_code (str): Python function code that processes requests (must define process_request(request))\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to (all if None)\n    priority (int): Hook priority (lower = higher priority)\n    \nReturns:\n    Dict[str, Any]: Hook creation result with hook_id\n    \nExample function_code:\n    ```python\n    def process_request(request):\n        if \"example.com\" in request[\"url\"]:\n            return HookAction(action=\"redirect\", url=\"https://httpbin.org/get\")\n        return HookAction(action=\"continue\")\n    ```",
                    "display_name": "create_dynamic_hook",
                    "name": "create_dynamic_hook",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_dynamic_hook"
                    ]
                  },
                  {
                    "args": {
                      "action": {
                        "title": "Action",
                        "type": "string"
                      },
                      "custom_headers": {
                        "anyOf": [
                          {
                            "type": "object"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Custom Headers"
                      },
                      "instance_ids": {
                        "anyOf": [
                          {
                            "items": {},
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Instance Ids"
                      },
                      "name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "target_url": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Target Url"
                      },
                      "url_pattern": {
                        "title": "Url Pattern",
                        "type": "string"
                      }
                    },
                    "description": "Create a simple dynamic hook using predefined templates (easier for AI).\n\nArgs:\n    name (str): Hook name\n    url_pattern (str): URL pattern to match\n    action (str): Action type - 'block', 'redirect', 'add_headers', or 'log'\n    target_url (Optional[str]): Target URL for redirect action\n    custom_headers (Optional[Dict[str, str]]): Headers to add for add_headers action\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to\n    \nReturns:\n    Dict[str, Any]: Hook creation result",
                    "display_description": "Create a simple dynamic hook using predefined templates (easier for AI).\n\nArgs:\n    name (str): Hook name\n    url_pattern (str): URL pattern to match\n    action (str): Action type - 'block', 'redirect', 'add_headers', or 'log'\n    target_url (Optional[str]): Target URL for redirect action\n    custom_headers (Optional[Dict[str, str]]): Headers to add for add_headers action\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to\n    \nReturns:\n    Dict[str, Any]: Hook creation result",
                    "display_name": "create_simple_dynamic_hook",
                    "name": "create_simple_dynamic_hook",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_simple_dynamic_hook"
                    ]
                  },
                  {
                    "args": {
                      "instance_id": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "title": "Instance Id"
                      }
                    },
                    "description": "List all dynamic hooks.\n\nArgs:\n    instance_id (Optional[str]): Optional filter by browser instance\n    \nReturns:\n    Dict[str, Any]: List of hooks with details and statistics",
                    "display_description": "List all dynamic hooks.\n\nArgs:\n    instance_id (Optional[str]): Optional filter by browser instance\n    \nReturns:\n    Dict[str, Any]: List of hooks with details and statistics",
                    "display_name": "list_dynamic_hooks",
                    "name": "list_dynamic_hooks",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_dynamic_hooks"
                    ]
                  },
                  {
                    "args": {
                      "hook_id": {
                        "title": "Hook Id",
                        "type": "string"
                      }
                    },
                    "description": "Get detailed information about a specific dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier\n    \nReturns:\n    Dict[str, Any]: Detailed hook information including function code",
                    "display_description": "Get detailed information about a specific dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier\n    \nReturns:\n    Dict[str, Any]: Detailed hook information including function code",
                    "display_name": "get_dynamic_hook_details",
                    "name": "get_dynamic_hook_details",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_dynamic_hook_details"
                    ]
                  },
                  {
                    "args": {
                      "hook_id": {
                        "title": "Hook Id",
                        "type": "string"
                      }
                    },
                    "description": "Remove a dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier to remove\n    \nReturns:\n    Dict[str, Any]: Removal status",
                    "display_description": "Remove a dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier to remove\n    \nReturns:\n    Dict[str, Any]: Removal status",
                    "display_name": "remove_dynamic_hook",
                    "name": "remove_dynamic_hook",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "remove_dynamic_hook"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get comprehensive documentation for creating hook functions (AI learning).\n\nReturns:\n    Dict[str, Any]: Documentation of request object structure and HookAction types",
                    "display_description": "Get comprehensive documentation for creating hook functions (AI learning).\n\nReturns:\n    Dict[str, Any]: Documentation of request object structure and HookAction types",
                    "display_name": "get_hook_documentation",
                    "name": "get_hook_documentation",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_hook_documentation"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get example hook functions for AI learning.\n\nReturns:\n    Dict[str, Any]: Collection of example hook functions with explanations",
                    "display_description": "Get example hook functions for AI learning.\n\nReturns:\n    Dict[str, Any]: Collection of example hook functions with explanations",
                    "display_name": "get_hook_examples",
                    "name": "get_hook_examples",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_hook_examples"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get documentation on hook requirements and matching criteria.\n\nReturns:\n    Dict[str, Any]: Requirements documentation and best practices",
                    "display_description": "Get documentation on hook requirements and matching criteria.\n\nReturns:\n    Dict[str, Any]: Requirements documentation and best practices",
                    "display_name": "get_hook_requirements_documentation",
                    "name": "get_hook_requirements_documentation",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_hook_requirements_documentation"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get common hook patterns and use cases.\n\nReturns:\n    Dict[str, Any]: Common patterns like ad blocking, API proxying, etc.",
                    "display_description": "Get common hook patterns and use cases.\n\nReturns:\n    Dict[str, Any]: Common patterns like ad blocking, API proxying, etc.",
                    "display_name": "get_hook_common_patterns",
                    "name": "get_hook_common_patterns",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_hook_common_patterns"
                    ]
                  },
                  {
                    "args": {
                      "function_code": {
                        "title": "Function Code",
                        "type": "string"
                      }
                    },
                    "description": "Validate hook function code for common issues before creating.\n\nArgs:\n    function_code (str): Python function code to validate\n    \nReturns:\n    Dict[str, Any]: Validation results with issues and warnings",
                    "display_description": "Validate hook function code for common issues before creating.\n\nArgs:\n    function_code (str): Python function code to validate\n    \nReturns:\n    Dict[str, Any]: Validation results with issues and warnings",
                    "display_name": "validate_hook_function",
                    "name": "validate_hook_function",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "validate_hook_function"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "dragging": false,
        "id": "MCPTools-Uvxt8",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 1214.0698067416984,
          "y": 311.6922113925688
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ReadFileComponent-doaYk",
          "node": {
            "base_classes": [
              "Text"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Use this tool to read the contents of a file.",
            "display_name": "Read File Component",
            "documentation": "",
            "edited": true,
            "field_order": [
              "file_path"
            ],
            "frozen": false,
            "icon": "code",
            "last_updated": "2025-09-07T15:16:51.434Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "# from langflow.field_typing import Data\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.data import Data\n\n\nclass ReadFileComponent(Component):\n    display_name = \"Read File Component\"\n    description = \"Use this tool to read the contents of a file.\"\n    icon = \"code\"\n    name = \"ReadFileComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"file_path\",\n            display_name=\"File Path\",\n            info=\"This is a tool to read the contents of a file.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"content\", name=\"content\", method=\"read_file\"),\n    ]\n\n\n    def read_file(self) -> str:\n        \"\"\"Read the contents of a file.\n        \n        Args:\n            file_path: Path to the file relative to the base directory\n        \"\"\"\n        target_file = os.path.normpath(os.path.join(\"\", self.file_path))\n        \n        # Security check to prevent directory traversal\n        if not target_file.startswith(\"\"):\n            return f\"Error: Cannot access files outside of the base directory.\"\n        \n        try:\n            if not os.path.isfile(target_file):\n                return f\"Error: File does not exist or is not a file: {file_path}\"\n            \n            with open(target_file, 'r') as f:\n                content = f.read()\n            \n            return content\n        except Exception as e:\n            return f\"Error reading file: {str(e)}\"\n"
              },
              "file_path": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "File Path",
                "dynamic": false,
                "info": "This is a tool to read the contents of a file.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "/app/stealth-browser-mcp/element_clones/page_content_20250907_055108_49f1f45d.json"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "file_path": {
                        "default": "",
                        "description": "This is a tool to read the contents of a file.",
                        "title": "File Path",
                        "type": "string"
                      }
                    },
                    "description": "Use this tool to read the contents of a file.",
                    "display_description": "Use this tool to read the contents of a file.",
                    "display_name": "read_file",
                    "name": "read_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "read_file"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ReadFileComponent"
        },
        "dragging": false,
        "id": "ReadFileComponent-doaYk",
        "measured": {
          "height": 202,
          "width": 320
        },
        "position": {
          "x": 1226.093821180283,
          "y": 64.29188230767868
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -667.2458545168265,
      "y": -2.499228053698289,
      "zoom": 0.5988194259028587
    }
  },
  "description": "Scraper Agent",
  "endpoint_name": null,
  "id": "5850748e-7237-475f-8e26-d89f1c25f424",
  "is_component": false,
  "last_tested_version": "1.5.1",
  "name": "[main] scraper agent (1) (1)",
  "tags": [
    "assistants",
    "agents"
  ]
}